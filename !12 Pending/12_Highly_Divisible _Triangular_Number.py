'''
* The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

            1, 3, 6, 10, 15, 21, 28, 36, 45, 55, .....

Let us list the factors of the first seven triangle numbers:

            1:  1
            3:  1, 3
            6:  1, 2, 3, 6
            10: 1, 2, 5, 10
            15: 1, 2, 5, 10
            21: 1, 3, 7, 21
            28: 1, 2, 4, 7, 14, 28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

'''

import time



def SieveOfEratos(n):
    prime = [True for i in range(n+1)]
    p = 2
    while (p*p <= n):
        if (prime[p]):
            for i in range(p*p, n+1, p):
                prime[i] = False
        p = p + 1
    return prime

def div_num(num):
    count = 1
    fct = [1]
    primes = SieveOfEratos(int(num**(1/2)))
    print(primes)
    for i in range(2, int(num**(1/2)) + 1):
        if (primes[i]) and (num%i == 0):
            fct.append(i)

    print(fct)
    s = 0

    for i in fct[1::-1]:
        for j in range(i):
            if i**j > num:
                s = s + j
                break
    
    print(s)
    #return len(fct)

'''
Starting with n = 1 total divisor 100 output = 73920 Time: 0.5059191000000283 Seconds
Then n = 10000 total divisor = 200


n = 1
total_divisor = 100
sm = 0
sm = n*(n+1)//2

st_tim = time.perf_counter()

while True:
    #print(sm)
    cnt = div_num(sm)
    #print(cnt)
    if cnt > total_divisor:
        break
    n = n+1
    sm = sm + n

end_tim = time.perf_counter()
print(sm)
print('Time:', end_tim - st_tim, 'Seconds')
'''

#print(div_num(100))
div_num(100)